{
  "hash": "9edea6f9f69f91a5c0b99ea8ae97e0ed",
  "result": {
    "engine": "knitr",
    "markdown": "---\nnumber-depth: 2\nformat:\n  pdf:\n    prefer-html: true\n---\n\n\n\n\n# Euclidean and routing distances\n\nWe will show how to estimate euclidean distances (*as crown flights*) using `sf` package, and the distances using a road network using `r5r` package (demonstrative).\n\n## Euclidean distances\n\nTaking the survey respondents' location, we will estimate the distance to the university (IST) using the `sf` package.\n\n### Import survey data frame convert to sf\n\nWe will use a survey dataset with 200 observations, with the following variables: ID, Affiliation, Age, Sex, Transport Mode to IST, and latitude and longitude coordinates.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nSURVEY = read.csv(\"../data/SURVEY.txt\", sep = \"\\t\") # tab delimiter\nnames(SURVEY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ID\"   \"AFF\"  \"AGE\"  \"SEX\"  \"MODE\" \"lat\"  \"lon\" \n```\n\n\n:::\n:::\n\n\n\n\nAs we have the coordinates, we can convert this data frame to a spatial feature, as explained in the [Introduction to spatial data](spatial-data.qmd#create-spatial-data-from-coordinates) section.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n\nSURVEYgeo = st_as_sf(SURVEY, coords = c(\"lon\", \"lat\"), crs = 4326) # convert to as sf data\n```\n:::\n\n\n\n\n### Create new point at the university\n\nUsing coordinates from Instituto Superior TÃ©cnico, we can directly create a simple feature and assign its crs.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUNIVERSITY = data.frame(place = \"IST\",\n                        lon = -9.1397404,\n                        lat = 38.7370168) |>  # first a dataframe\n  st_as_sf(coords = c(\"lon\", \"lat\"), # then a spacial feature\n           crs = 4326)\n```\n:::\n\n\n\n\nVisualize in a map:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapview)\nmapview(SURVEYgeo, zcol = \"MODE\") + mapview(UNIVERSITY, col.region = \"red\", cex = 12)\n```\n\n::: {.cell-output-display}\n![](distances_files/figure-pdf/unnamed-chunk-4-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n\n### Straight lines\n\nFirst we will create lines connecting the survey locations to the university, using the `st_nearest_points()` function.\n\nThis function finds returns the nearest points between two geometries, and creates a line between them.\nThis can be useful to find the nearest train station to each point, for instance.\n\nAs we only have 1 point at UNIVERSITY layer, we will have the same number of lines as number of surveys = 200.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSURVEYeuclidean = st_nearest_points(SURVEYgeo, UNIVERSITY, pairwise = TRUE) |>\n  st_as_sf() # this creates lines\n\nmapview(SURVEYeuclidean)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in cbind(`Feature ID` = fid, mat): number of rows of result is not a\nmultiple of vector length (arg 1)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfile:////tmp/Rtmpz58kqB/file21607573cc9c/widget21606b494586.html screenshot completed\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](distances_files/figure-pdf/unnamed-chunk-5-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n\nNote that if we have more than one point in the second layer, the `pairwise = TRUE` will create a line for each combination of points.\nSet to `FALSE` if, for instance, you have the same number of points in both layers and want to create a line between the corresponding points.\n\n### Distance\n\nNow we can estimate the distance using the `st_length()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# compute the line length and add directly in the first survey layer\nSURVEYgeo = SURVEYgeo |> \n  mutate(distance = st_length(SURVEYeuclidean))\n\n# remove the units - can be useful\nSURVEYgeo$distance = units::drop_units(SURVEYgeo$distance) \n```\n:::\n\n\n\n\nWe could also estimate the distance using the `st_distance()` function **directly**, although we would not get and sf with lines.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSURVEYgeo = SURVEYgeo |> \n  mutate(distance = st_distance(SURVEYgeo, UNIVERSITY)[,1] |>  # in meters\n           units::drop_units()) |>  # remove units\n  mutate(distance = round(distance)) # round to integer\n\nsummary(SURVEYgeo$distance)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    298    1106    2186    2658    3683    8600 \n```\n\n\n:::\n:::\n\n\n\n\n`SURVEYgeo` is still a points' sf.\n\n## Routing Engines\n\nThere are different types of routing engines, regarding the type of network they use, the type of transportation they consider, and the type of data they need.\nWe can have:\n\n-   Uni-modal vs. Multi-modal\n\n    -   One mode per trip vs. One trip with multiple legs that can be made with different modes\n    -   Multi-modal routing may require GTFS data (realistic Public Transit)\n\n-   Output level of the results\n\n    -   Routes (1 journey = 1 route)\n    -   Legs\n    -   Segments\n\n-   Routing profiles\n\n    -   Type of user\n    -   fastest / shortest path\n    -   avoid barriers / tolls, etc\n\n![Routing options in [OpenRouteService](https://maps.openrouteservice.org/)](images/clipboard-1370155720.png){fig-align=\"center\"}\n\n-   Local vs. Remote (service request - usually web API)\n\n    -   Speed vs. Quota limits / price\n    -   Hard vs. Easy set up\n    -   Hardware limitations in local routing\n    -   Global coverage in remote routing, with frequent updates\n\nExamples: [OSRM](https://project-osrm.org/), [Dodgr](https://urbananalyst.github.io/dodgr/), [r5r](https://ipeagit.github.io/r5r/), [Googleway](https://symbolixau.github.io/googleway/reference/access_result.html), [CycleStreets](https://m.cyclestreets.net/journey), [HERE](https://munterfi.github.io/hereR/).\n\n### Routing distances with `r5r`\n\nWe use the `r5r` package to estimate the distance using a road network [@Pereira2021r5r].\n\n::: {.callout-note appearance=\"simple\"}\nTo properly the setup r5r model for the area you are working on, you need to download the **road network** data from OpenStreetMap and, if needed, add a **GTFS** and **DEM** file, as it will be explained in the [next section](r5r.qmd).\n:::\n\n\n\n\n\n\n\n\n\nWe will use only respondents with a distance to the university less than 2 km.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSURVEYsample = SURVEYgeo |> filter(distance <= 2000)\nnrow(SURVEYsample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 95\n```\n\n\n:::\n:::\n\n\n\n\nWe need an id (unique identifier) for each survey location, to be used in the routing functions of `r5r`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create id columns for both datasets\nSURVEYsample = SURVEYsample |> \n  mutate(id = c(1:nrow(SURVEYsample))) # from 1 to the number of rows\n\nUNIVERSITY = UNIVERSITY |> \n  mutate(id = 1) # only one row\n```\n:::\n\n\n\n\n#### Distances by car\n\nEstimate the routes with time and distance by car, from survey locations to University.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSURVEYcar = detailed_itineraries(\n  r5r_core = r5r_network,\n  origins = SURVEYsample,\n  destinations = UNIVERSITY,\n  mode = \"CAR\",\n  all_to_all = TRUE # if false, only 1-1 would be calculated\n)\n\nnames(SURVEYcar)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"from_id\"          \"from_lat\"         \"from_lon\"         \"to_id\"           \n [5] \"to_lat\"           \"to_lon\"           \"option\"           \"departure_time\"  \n [9] \"total_duration\"   \"total_distance\"   \"segment\"          \"mode\"            \n[13] \"segment_duration\" \"wait\"             \"distance\"         \"route\"           \n[17] \"geometry\"        \n```\n\n\n:::\n:::\n\n\n\n\nThe [`detailed_itineraries()`](https://ipeagit.github.io/r5r/reference/detailed_itineraries.html) function is super detailed!\n\n::: {.callout-note appearance=\"simple\"}\nIf we want to know only time and distance, and **not the route** itself, we can use the [`travel_time_matrix()`](https://ipeagit.github.io/r5r/reference/travel_time_matrix.html).\n:::\n\n#### Distances by foot\n\nRepeat the same for `WALK`[^distances-1].\n\n[^distances-1]: For bike you would use `BICYCLE`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nSURVEYwalk = detailed_itineraries(\n  r5r_core = r5r_network,\n  origins = SURVEYsample,\n  destinations = UNIVERSITY,\n  mode = \"WALK\",\n  all_to_all = TRUE # if false, only 1-1 would be calculated\n)\n```\n:::\n\n\n\n\n#### Distances by PT\n\nFor Public Transit (`TRANSIT`) you may specify the egress mode, the departure time, and the maximum number of transfers.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nSURVEYtransit = detailed_itineraries(\n  r5r_core = r5r_network,\n  origins = SURVEYsample,\n  destinations = UNIVERSITY,\n  mode = \"TRANSIT\",\n  mode_egress = \"WALK\",\n  max_rides = 1, # The maximum PT rides allowed in the same trip\n  departure_datetime =  as.POSIXct(\"20-09-2023 08:00:00\",\n                                 format = \"%d-%m-%Y %H:%M:%S\"),\n  all_to_all = TRUE # if false, only 1-1 would be calculated\n)\n```\n:::\n\n\n\n\n## Compare distances\n\nWe can now compare the euclidean and routing distances that we estimated for the survey locations under 2 km.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(SURVEYsample$distance) # Euclidean\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    298     790    1046    1112    1470    1963 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(SURVEYwalk$distance) # Walk\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    569    1090    1465    1505    1925    2710 \n```\n\n\n:::\n\n```{.r .cell-code}\nsummary(SURVEYcar$distance) # Car\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    228    1401    1823    1893    2431    3177 \n```\n\n\n:::\n:::\n\n\n\n\n> What can you understand from this results?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](distances_files/figure-pdf/unnamed-chunk-15-1.pdf)\n:::\n:::\n\n\n\n\n### Circuity\n\nCompare 1 single route.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmapview(SURVEYeuclidean[165,], color = \"black\") + # 1556 meters\n  mapview(SURVEYwalk[78,], color = \"red\") + # 1989 meters\n  mapview(SURVEYcar[78,], color = \"blue\") # 2565 meters\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfile:////tmp/Rtmpz58kqB/file2160748fbbf8/widget216012e8a2.html screenshot completed\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](distances_files/figure-pdf/unnamed-chunk-16-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n\nWith this we can see the **circuity** of the routes, a measure of route / transportation efficiency, which is the ratio between the routing distance and the euclidean distance.\n\nThe cicuity for car (1.65) is usually higher than for walking (1.28) or biking, for shorter distances.\n\n## Visualize routes\n\nVisualize with transparency of 30%, to get a clue when they overlay.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapview(SURVEYwalk, alpha = 0.3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfile:////tmp/Rtmpz58kqB/file21603292c022/widget21604ea4ec2c.html screenshot completed\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](distances_files/figure-pdf/unnamed-chunk-17-1.png){fig-pos='H'}\n:::\n\n```{.r .cell-code}\nmapview(SURVEYcar, alpha = 0.3, color = \"red\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfile:////tmp/Rtmpz58kqB/file21604cbba208/widget216014e01dfd.html screenshot completed\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](distances_files/figure-pdf/unnamed-chunk-17-2.png){fig-pos='H'}\n:::\n:::\n\n\n\n\nWe can also use the [`overline()`](https://docs.ropensci.org/stplanr/reference/overline.html) function from `stplanr` package to break up the routes when they *overline*, and add them up.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we create a value that we can later sum\n# it can be the number of trips represented by this route\nSURVEYwalk$trips = 1 # in this case is only one respondent per route\n\nSURVEYwalk_overline = stplanr::overline(\n  SURVEYwalk,\n  attrib = \"trips\",\n  fun = sum\n)\n\nmapview(SURVEYwalk_overline, zcol = \"trips\", lwd = 3)\n```\n\n::: {.cell-output-display}\n![](distances_files/figure-pdf/unnamed-chunk-18-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n\nWith this we can visually inform on how many people travel along a route, from the survey dataset[^distances-2].\n\n[^distances-2]: Assuming all travel by the shortest path.\n",
    "supporting": [
      "distances_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}