{
  "hash": "80f4dccb7822cf97e73cc0a4b1d86eda",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat:\n  pdf:\n    prefer-html: true\n---\n\n\n\n\n# OD pairs and desire lines\n\nDesire lines are a way to represent the flow of people or goods between two points.\nThey are often used in transport planning to represent the flow of trips between zones.\n\nThere are many ways to create desire lines, connecting origins and destinations.\nFor instance:\n\n-   1 origin to 1 destination\n\n    -   home ⟷ work place\n\n-   multiple origins to a single destinations\n\n    -   students’ homes ⟷ 1 school\n\n-   origin zone to destination zone\n\n    -   for aggregated trips (macro representation)\n\n-   OD jittering[^desire-lines-1]\n\n[^desire-lines-1]: See [@Lovelace2022].\n\n![](images/clipboard-157094575.png){width=\"261\"} ![](images/clipboard-1443223500.png){width=\"215\"} ![Examples of representation od desire lines: a) multiple origins and 1 destination; b) transport zones; c) od jittering](images/clipboard-2000165959.png){width=\"242\"}\n\nThe [`stplanr`](https://docs.ropensci.org/stplanr/index.html) package is a collection of functions for sustainable transport planning with R, and it is built on top of the `sf` package [@stplanr].\n\nIn this workshop, we will use the [`od`](https://itsleeds.github.io/od/) package, a lightweight package with a few functions from `stplanr`, namely the ones to create desire lines from origin-destination (OD) pairs [@od].\n\n## Desire lines with `od_to_sf`\n\nTo create desire lines, we need a dataset with OD pairs **and** other dataset with the corresponding transport zones (spatial data).\n\nThe `TRIPSmode.Rds` dataset includes origins, destinations and number of trips between municipalities.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRIPSmode = readRDS(\"../data/TRIPSmode.Rds\")\n```\n:::\n\n\n\n\nThe `Municipalities_geo.gpkg` dataset includes the geometry of the transport zones.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nMunicipalities_geo = st_read(\"../data/Municipalities_geo.gpkg\", quiet = TRUE) # supress mesage\n```\n:::\n\n\n\n\nThen, we need to load the `od` package.\nWe will use the `od_to_sf()` function to create desire lines from OD pairs.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"od\")\nlibrary(od)\n\nTRIPSdlines = od_to_sf(TRIPSmode, z = Municipalities_geo) # z for zones\n```\n:::\n\n\n\n\nFor this magic to work smoothly, the first two columns of the `TRIPSmode` dataset must be the **origin** and **destination** zones, and these zones need to correspond to the first column of the `Municipalities_geo` dataset (with an associated geometry).\n\n::: {.callout-tip appearance=\"simple\" icon=\"false\"}\nSee more options with the `?stplanr::od2line` function.\n:::\n\nNow we can visualize the desire lines using the `mapview` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mapview)\nmapview(TRIPSdlines, zcol = \"Total\")\n```\n\n::: {.cell-output-display}\n![](desire-lines_files/figure-pdf/unnamed-chunk-4-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n\nAs you can see, this is too much information to be able to understand the flows.\n\n### Filtering desire lines\n\nFilter **intrazonal** trips.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nTRIPSdlines_inter = TRIPSdlines |> \n  filter(Origin != Destination) |> # remove intrazonal trips\n  filter(Total > 5000) # remove noise\n\nmapview(TRIPSdlines_inter, zcol = \"Total\", lwd = 5)\n```\n\n::: {.cell-output-display}\n![](desire-lines_files/figure-pdf/unnamed-chunk-5-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n\nFilter trips with origin or destination **not in** Lisbon.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRIPSdl_noLX = TRIPSdlines_inter |> \n  filter(Origin != \"Lisboa\", Destination != \"Lisboa\")\n\nmapview(TRIPSdl_noLX, zcol = \"Total\", lwd = 8) # larger line width\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfile:////tmp/RtmpSvWzWQ/file1f6130a8558d/widget1f61221074dd.html screenshot completed\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](desire-lines_files/figure-pdf/unnamed-chunk-6-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n\nTry to replace the `Total` with other variables, such as `Car`, `PTransit`, and see the differences.\n\n## Oneway desire lines\n\nNote that the `od_to_sf()` function creates bidirectional desire lines.\nThis can be not the ideal for visualization / representation purposes, as you will have 2 lines overlaping.\n\nThe function [`od_oneway()`](https://itsleeds.github.io/od/reference/od_oneway.html) aggregates oneway lines to produce bidirectional flows.\n\nBy default, it returns the sum of each numeric column for each bidirectional origin-destination pair.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(TRIPSdlines)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 315\n```\n\n\n:::\n\n```{.r .cell-code}\nTRIPSdlines_oneway = od_oneway(TRIPSdlines) |> \n  filter(o != d) # remove empty geometries\nnrow(TRIPSdlines_oneway)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 150\n```\n\n\n:::\n:::\n\n\n\n\nNote that for the last municipalities you have less combinations now.\nNevertheless, all the possible combinations are represented.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(TRIPSdlines_oneway[,c(1,2)]) # just the first 2 columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 2 fields\nAttribute-geometry relationships: identity (2)\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -9.229502 ymin: 38.62842 xmax: -8.915878 ymax: 38.75981\nGeodetic CRS:  WGS 84\n          o        d                       geometry\n1 Alcochete   Almada LINESTRING (-8.915878 38.73...\n2 Alcochete  Amadora LINESTRING (-8.915878 38.73...\n3    Almada  Amadora LINESTRING (-9.193061 38.63...\n4 Alcochete Barreiro LINESTRING (-8.915878 38.73...\n5    Almada Barreiro LINESTRING (-9.193061 38.63...\n6   Amadora Barreiro LINESTRING (-9.229502 38.75...\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(TRIPSdlines_oneway[,c(1,2)])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 6 features and 2 fields\nAttribute-geometry relationships: identity (2)\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: -9.357651 ymin: 38.49491 xmax: -8.80664 ymax: 38.92208\nGeodetic CRS:  WGS 84\n           o                   d                       geometry\n145   Oeiras Vila Franca de Xira LINESTRING (-9.276317 38.71...\n146  Palmela Vila Franca de Xira LINESTRING (-8.80664 38.617...\n147   Seixal Vila Franca de Xira LINESTRING (-9.108785 38.60...\n148 Sesimbra Vila Franca de Xira LINESTRING (-9.120129 38.49...\n149  Setúbal Vila Franca de Xira LINESTRING (-8.887489 38.51...\n150   Sintra Vila Franca de Xira LINESTRING (-9.357651 38.82...\n```\n\n\n:::\n:::\n\n\n\n\nExample of visualization with Public Transit trips in both ways.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRIPSdlines_oneway_noLX = TRIPSdlines_oneway |> \n  filter(PTransit > 5000) # reduce noise\n\nmapview(TRIPSdlines_oneway_noLX, zcol = \"PTransit\", lwd = 8)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfile:////tmp/RtmpSvWzWQ/file1f616c7e3f8a/widget1f616fdc9172.html screenshot completed\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](desire-lines_files/figure-pdf/unnamed-chunk-9-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n\n## Using population centroids\n\nThe `od_to_sf()` function uses the geometric center of the zones to create the desire lines.\nBut if we replace those zones by the [weighted centroids](spatial-data.qmd#weighted-centroids), we can have a more realistic representation of the flows.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Centroid_pop = st_read(\"data/Centroid_pop.gpkg\")\n\nTRIPSdlines_pop = od_to_sf(TRIPSmode, z = Centroid_pop) |>  # works the same way\n  od_oneway() |> # oneway\n  filter(o != d) # remove empty geometries\n```\n:::\n\n\n\n\nCheck differences of lines with trips from/to Lisbon:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRIPSdlines_geo_LX = TRIPSdlines_oneway |> \n  filter(o == \"Lisboa\" | d == \"Lisboa\") # or condition\nTRIPSdlines_pop_LX = TRIPSdlines_pop |> \n  filter(o == \"Lisboa\" | d == \"Lisboa\")\n\nmapview(TRIPSdlines_geo_LX, color = \"blue\") + mapview(TRIPSdlines_pop_LX, color = \"red\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nfile:////tmp/RtmpSvWzWQ/file1f6124ad14e9/widget1f617c48824a.html screenshot completed\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](desire-lines_files/figure-pdf/unnamed-chunk-12-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n\nThe next step will be estimating the **euclidean distances** between these centroids, and compare them with the **routing distances**.\n",
    "supporting": [
      "desire-lines_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}