{
  "hash": "5afb78d6164eaa3ecc3ed864b8c14c8e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Introduction to spatial data\"\ncode-fold: false\nnumber-depth: 2\nmessage: false\nwarning: false\nformat:\n  pdf:\n    prefer-html: true\n---\n\n\n\n\nSpatial data is **data that is associated with a geometry**.\nThis geometry can be a point, a line, a polygon, or a grid.\n\nSpatial data can be represented in many ways, such as vector data and raster data.\nIn this tutorial, we will learn how to work with spatial data in R.\n\nWe will use the `sf` package to work with vector data, and the `dplyr` package to manipulate data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\n```\n:::\n\n\n\n\n\n\nThe `sf` package is a powerful package for working with spatial data in R.\nIt includes hundreds of [functions](https://r-spatial.github.io/sf/reference/index.html) to deal with spatial data [@sf].\n\n## Import vector data\n\nDownload and open `Municipalities_geo.gpkg` under [EITcourse/data](https://github.com/U-Shift/EITcourse/tree/main/data) repository.\n\nWithin the `sf` package, we use the `st_read()` to read spatial features.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMunicipalities_geo = st_read(\"data/Municipalities_geo.gpkg\")\n```\n:::\n\n\n\n\n\n\n::: {.callout-tip appearance=\"simple\"}\nYou can also open directly from url from github.\nExample:\n\n`url = \"https://github.com/U-Shift/EITcourse/raw/main/data/Municipalities_geo.gpkg\"`\n`Municipalities_geo = st_read(url)`\n:::\n\n### Projected vs Geographic Coordinate Systems\n\nA **projected coordinate system** is a flat representation of the Earth's surface.\nA **geographic coordinate system** is a spherical representation of the Earth's surface.\n\n![Source: ESRI](images/clipboard-1233124217.png){fig-align=\"center\"}\n\nThe `st_crs()` function can be used to check the **coordinate reference system** of a spatial object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(Municipalities_geo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        MEMBER[\"World Geodetic System 1984 (G2296)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\n\nWGS84 is the most common geographic coordinate system, used in GPS, and [EPSG:**4326**](https://epsg.io/4326) is code for it.\n\nIf we want to project the data to a projected coordinate system, to use **metric units** instead of degrees, we can use the `st_transform()` function.\n\nIn this case, the [EPGS:**3857**](https://epsg.io/3857) is the code for the Pseudo-Mercator coordinate system.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMunicipalities_projected = st_transform(Municipalities_geo, crs = 3857)\n```\n:::\n\n\n\n\nNow see the differences when calling `Municipalities_geo` and `Municipalities_projected.`\n\n## Join geometries to data frames\n\nImport `TRIPSmun.Rds` file and check data class\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRIPSmun = readRDS(\"../data/TRIPSmun.Rds\")\nclass(TRIPSmun)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(Municipalities_geo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\nTo join the geometries from the `Municipalities_geo` to the data frame, we can use the `left_join()` function from the `dplyr` package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRIPSgeo =\n  TRIPSmun |> \n  left_join(Municipalities_geo)\n\nclass(TRIPSgeo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\nAs you can see, this **does not make the object a spatial feature**.\nTo do this, we need to use the `st_as_sf()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTRIPSgeo = TRIPSgeo |> st_as_sf()\nclass(TRIPSgeo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\nNow we have a spatial feature with the data frame.\n\n## Create spatial data from coordinates\n\nThe `st_as_sf()` function can also be used to create a spatial feature from a data frame with coordinates.\nIn that case, we need to specify the columns with the coordinates.\n\nWe will use survey data (in `.txt`) with the participants' home latitude/longitude coordinates to create a spatial feature.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSURVEY = read.csv(\"../data/SURVEY.txt\", sep = \"\\t\") # tab delimiter\nclass(SURVEY)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\nSURVEYgeo = st_as_sf(SURVEY, coords = c(\"lon\", \"lat\"), crs = 4326) # create spatial feature\nclass(SURVEYgeo)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\nWe can also set the **crs** of the spatial feature on the fly.\n\nCheck the differences between both data variables.\n\n## Visuzlize spatial data\n\nRepresent Transport Zones with Total and Car, using `plot()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(TRIPSgeo) # all variables\n```\n\n::: {.cell-output-display}\n![](spatial-data_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(TRIPSgeo[\"Municipality\"])\n```\n\n::: {.cell-output-display}\n![](spatial-data_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(TRIPSgeo[\"Total\"])\n```\n\n::: {.cell-output-display}\n![](spatial-data_files/figure-html/unnamed-chunk-11-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(TRIPSgeo[\"Car\"])\n```\n\n::: {.cell-output-display}\n![](spatial-data_files/figure-html/unnamed-chunk-11-4.png){width=672}\n:::\n\n```{.r .cell-code}\n# plot pointy data\nplot(SURVEYgeo)\n```\n\n::: {.cell-output-display}\n![](spatial-data_files/figure-html/unnamed-chunk-11-5.png){width=672}\n:::\n:::\n\n\n\n\n::: {.callout-note appearance=\"simple\"}\nIn the next chapter we will learn how to create interactive maps.\n:::\n\n## Export spatial data\n\nYou can save your spatial data in different formats using the function `st_write()`, such as shapefiles (ESRI), GeoJSON, and GeoPackage.\n\nThis is also useful to convert spatial data between formats.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(TRIPSgeo, \"data/TRIPSgeo.gpkg\") # as geopackage\nst_write(TRIPSgeo, \"data/TRIPSgeo.shp\") # as shapefile\nst_write(TRIPSgeo, \"data/TRIPSgeo.geojson\") # as geojson\nst_write(TRIPSgeo, \"data/TRIPSgeo.csv\", layer_options = \"GEOMETRY=AS_WKT\") # as csv, with WKT geometry\n```\n:::\n\n\n\n\n::: {.callout-warning appearance=\"simple\"}\nIf you already have a file with the same name, you can use the `delete_dns = TRUE` argument to overwrite it.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}